{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6a76504",
   "metadata": {},
   "outputs": [],
   "source": [
    "from Bio import SeqIO\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from Bio import pairwise2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8036ca8",
   "metadata": {},
   "outputs": [],
   "source": [
    "Fasta=list(SeqIO.parse(\"Lungcancerprotein.fasta\",\"fasta\"))\n",
    "size=len(Fasta)\n",
    "i=0\n",
    "j=0\n",
    "alignments_score=np.empty(shape=(size,size))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7467b0fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[678. 665. 660. 494. 540. 459. 581. 499. 410. 405. 323. 456. 375.]\n",
      " [665. 680. 675. 509. 555. 474. 583. 500. 412. 407. 324. 458. 377.]\n",
      " [660. 675. 676. 504. 550. 469. 578. 495. 407. 408. 325. 453. 372.]\n",
      " [494. 509. 504. 510. 505. 464. 412. 329. 413. 408. 325. 408. 367.]\n",
      " [540. 555. 550. 505. 555. 466. 458. 375. 408. 403. 320. 458. 369.]\n",
      " [459. 474. 469. 464. 466. 487. 377. 294. 367. 362. 279. 369. 390.]\n",
      " [581. 583. 578. 412. 458. 377. 586. 501. 415. 410. 325. 461. 380.]\n",
      " [499. 500. 495. 329. 375. 294. 501. 501. 330. 325. 325. 376. 295.]\n",
      " [410. 412. 407. 413. 408. 367. 415. 330. 416. 411. 326. 411. 370.]\n",
      " [405. 407. 408. 408. 403. 362. 410. 325. 411. 412. 327. 406. 365.]\n",
      " [323. 324. 325. 325. 320. 279. 325. 325. 326. 327. 327. 321. 280.]\n",
      " [456. 458. 453. 408. 458. 369. 461. 376. 411. 406. 321. 461. 372.]\n",
      " [375. 377. 372. 367. 369. 390. 380. 295. 370. 365. 280. 372. 393.]]\n"
     ]
    }
   ],
   "source": [
    "def pairwise_seq_heatmap(i, j, my_numpy_array, size):\n",
    "    for i in range(size):\n",
    "        for j in range(size):\n",
    "            X = Fasta[i].seq\n",
    "            Y = Fasta[j].seq\n",
    "            my_numpy_array[i,j] = int(pairwise2.align.globalxx(X,Y,score_only=True))\n",
    "    return(my_numpy_array)\n",
    "print(pairwise_seq_heatmap(i, j, alignments_score, size))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e2afbc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots()\n",
    "plt.imshow(alignments_score)\n",
    "im = ax.imshow(alignments_score)\n",
    "cbar = ax.figure.colorbar(im)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7292b11b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
